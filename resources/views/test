@extends('layouts.BeeOrder_header')

@section('title', __('Tasks'))

@section('content')
<head>
    <meta name="csrf-token" content="{{ csrf_token() }}">
</head>

    <body>
        @csrf

        @role('leader')
            <button id="toggleFormButton" class="btn btn-primary mb-3">{{ __('Create New Task') }}</button>

            <form id="taskForm" action="{{ route('tasks.store') }}" method="POST" style="display: none;">
                @csrf
                <div class="task-list2">
                    <!-- Task description in English -->
                    <div class="schedule-item">
                        <label for="task_description_en">{{ __('Task Description (English)') }}:</label>
                        <input type="text" id="task_description_en" name="task_description_en" class="form-control" value="{{ old('task_description_en') }}">
                    </div>

                    <!-- Task description in Arabic -->
                    <div class="schedule-item">
                        <label for="task_description_ar">{{ __('Task Description (Arabic)') }}:</label>
                        <input type="text" id="task_description_ar" name="task_description_ar" class="form-control" value="{{ old('task_description_ar') }}">
                    </div>

                    <!-- Task deadline -->
                    <div class="schedule-item">
                        <label for="dead_line">{{ __('Deadline') }} :</label>
                        <input type="datetime-local" class="form-control" id="dead_line" name="dead_line" required>
                    </div>

                    <!-- Assign Users -->
                    <label class="schedule-item" for="assignUsersDropdown">{{ __('Assign Users') }}:</label>
                    <select id="assignUsersDropdown" name="assign_users[]" multiple required>
                        @foreach ($users as $user)
                            <option value="{{ $user->id }}">{{ $user->name }}</option>
                        @endforeach
                    </select>

                    <!-- Assign Categories -->
                    <label class="schedule-item" for="assignCategoriesDropdown">{{ __('Assign Categories') }}:</label>
                    <select id="assignCategoriesDropdown" class="form-control" name="assign_categories[]" multiple>
                        @foreach ($Categories as $category)
                            <option value="{{ $category->id }}">{{ $category->name }}</option>
                        @endforeach
                    </select>
                </div>

                <!-- Stripe Payment Section -->
                <div class="text-center mt-3">
                    <button type="button" id="checkoutButton" class="btn btn-primary">{{ __('Proceed to Payment') }}</button>
                </div>

                <!-- Hidden form submit button -->
                <button type="submit" id="createTaskSubmit" class="edit-button" style="display: none;">{{ __('Create Task') }}</button>
            </form>
        @endrole

        <div class="container">
            <div class="search-container">
                <input type="text" id="searchBox" placeholder="{{ __('Search tasks') }}" autocomplete="on">
                <img src="{{ asset('BeeOrder/img/searchIcon.png') }}" alt="{{ __('Search Icon') }}">
            </div>

            <h1>{{ __('Tasks View') }}</h1>
            {{-- @include('partials.task_index', compact('tasks', 'users', 'Categories')) --}}

            <!-- Paginate Links -->
            <div class="d-flex justify-content-center">
                <div id="pagination-links">
                    {{ $tasks->links('pagination::bootstrap-5') }}
                </div>
            </div>
        </div>

        <script>
            $(function() {
                $.ajaxSetup({
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    }
                });

                document.getElementById('checkoutButton').addEventListener('click', function () {
    // Collect task data from the form
    var taskForm = document.getElementById('taskForm');
    var formData = new FormData(taskForm);

    // Send the task data to the Stripe checkout session route via AJAX
    fetch("{{ route('create-checkout-session') }}", {
        method: "POST",
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.url) {
            // Redirect to the Stripe checkout page
            window.location.href = data.url;
        } else {
            alert('Failed to initiate Stripe payment.');
        }
    })
    .catch(error => console.log('Error:', error));
});
                // Initialize Select2 for dropdowns
                $('#assignUsersDropdown').select2();
                $('#assignCategoriesDropdown').select2();

                // Maintain a global array for tasks
                let tasks = @json($tasks);

                // Toggle form visibility
                $('#toggleFormButton').click(function() {
                    $('#taskForm').toggle();
                });

                $('#taskForm').on('submit', function(e) {
                    e.preventDefault();
                    $.ajax({
                        url: $(this).attr('action'),
                        type: 'POST',
                        data: $(this).serialize(),

                        success: function(response) {
                            if (response.success) {
                                const lastPage = response.lastPage;
                                fetchTasks(lastPage, function() {
                                    $('#task_description_en').val('');
                                    $('#task_description_ar').val('');

                                    $('#dead_line').val('');
                                    $('#assignUsersDropdown').val([]).trigger('change');
                                    $('#assignCategoriesDropdown').val([]).trigger('change');
                                    $('#taskForm').hide();
                                    alert(response.message);
                                });


                            } else {
                                alert('{{ __('Failed to create the task.') }}');
                            }
                        },
                        error: function(xhr) {
                            //alert(response.message);
                            alert('{{ __('An error occurred. Please try again.') }}');
                        }
                    });
                });

                function fetchTasks(page, callback) {
                    $.ajax({
                        url: '{{ route('tasks.index') }}?page=' + page,
                        type: 'GET',
                        success: function(response) {
                            $('#tasksTable').html(response.tasks); // Update task list
                            $('#pagination-links').html(response.pagination); // Update pagination

                            if (typeof callback === 'function') {
                                callback();
                            }
                        },
                        error: function(xhr) {
                            alert('{{ __('An error occurred. Please try again.') }}');
                        }
                    });
                }

                // Handle task deletion
                $(document).on('click', '.delete-task-button', function(e) {
                    e.preventDefault();
                    let taskId = $(this).data('id');

                    if (confirm('{{ __('Are you sure you want to delete this task?') }}')) {
                        $.ajax({
                            url: '{{ route('tasks.destroy', ':id') }}'.replace(':id', taskId),
                            type: 'DELETE',
                            data: {
                                _token: '{{ csrf_token() }}'
                            },
                            success: function(response) {
                                if (response.success) {
                                    $('#task-' + taskId).remove();
                                    alert(response.message);
                                } else {
                                    alert('{{ __('Failed to delete the task.') }}');
                                }
                            },
                            error: function(xhr) {
                                if (xhr.status === 403) {
                                    alert('{{ __('You do not have permission to delete this task.') }}');
                                } else {
                                    alert('{{ __('An error occurred. Please try again.') }}');
                                }
                            }
                        });
                    }
                });
            });
        </script>
@endsection

</body>
</html>
